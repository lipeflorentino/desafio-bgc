# serverless.yml

service: serverless-app-desafioBGC

custom:
  tableName: 'tb_app_users'
  minionTableName: 'tb_app_minions'
  carrinhoTableName: 'tb_app_carrinhos'
  loginTableName: 'tb_app_logins'
  vendaTableName: 'tb_app_vendas'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["AppUsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["AppMinionsDynamoDBTable","Arn" ] }
        - { "Fn::GetAtt": ["AppCarrinhosDynamoDBTable","Arn" ] }
        - { "Fn::GetAtt": ["AppLoginsDynamoDBTable","Arn" ] }
        - { "Fn::GetAtt": ["AppVendasDynamoDBTable","Arn" ] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  environment:
    USERS_TABLE: ${self:custom.tableName}
    MINIONS_TABLE: ${self:custom.minionTableName}
    CARRINHOS_TABLE: ${self:custom.carrinhoTableName}
    LOGINS_TABLE: ${self:custom.loginTableName}
    VENDAS_TABLE: ${self:custom.vendaTableName}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      
resources:
  Resources:
    AppUsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.tableName}
    AppMinionsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: minionId
            AttributeType: S
        KeySchema:
          -
            AttributeName: minionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.minionTableName}    
    AppCarrinhosDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: carrinhoId
            AttributeType: S
        KeySchema:
          -
            AttributeName: carrinhoId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.carrinhoTableName} 
    AppLoginsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S          
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH          
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.loginTableName}   
    AppVendasDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: vendaId
            AttributeType: S        
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
          -
            AttributeName: vendaId
            KeyType: RANGE    
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:custom.vendaTableName}      

plugins:
  - serverless-offline        